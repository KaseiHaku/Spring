<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
		    http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- ######################### spring 整合 mybatis ############################################# -->
	<!-- 1. 引入jdbc配置文件 -->    
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
				<value>classpath:config/properties/db.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->  
			</list>  
		</property>
        <property name="fileEncoding" value="UTF-8"></property><!--设置配置文件的编码格式-->
	</bean>  
	
	<!-- 2.配置数据源 -->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="initialPoolSize" value="8"></property>
        <property name="minPoolSize" value="2"></property>
        <property name="maxPoolSize" value="32"></property>
        <property name="acquireIncrement" value="4"></property>
    </bean>
    
    <!-- 3. 将 mybatis 的 SqlSessionFactoryBean 类添加到 IOC 容器中管理 -->
    <!--dataSource：引用数据源-->
    <!--typeAliasesPackage：指定实体类的包名：自动将实体类的简单类名映射成为别名-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"></property>    	   
        <property name="configLocation" value="classpath:config/mybatis/mybatis.xml" />
        <property name="mapperLocations" value="classpath:kasei/haku/webssm/repository/mapper/**/*Mapper.xml"/>
    </bean>
    
    <!-- 4. 配置 mybatis mapper 接口所在的包路径 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="kasei.haku.webssm.repository.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 5. 事务管理：DataSourceTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 配置该事务管理器管理的数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
    
    <!-- 6. 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>

	      
</beans>