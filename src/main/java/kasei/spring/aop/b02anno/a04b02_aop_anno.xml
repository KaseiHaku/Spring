<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:aop="http://www.springframework.org/schema/aop"  
    	xmlns:tx="http://www.springframework.org/schema/tx" 
    	xmlns:p="http://www.springframework.org/schema/p" 
    	xmlns:util="http://www.springframework.org/schema/util" 
    	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    	xmlns:cache="http://www.springframework.org/schema/cache"  
    	xsi:schemaLocation="  
		    http://www.springframework.org/schema/context  
		    http://www.springframework.org/schema/context/spring-context.xsd  
		    http://www.springframework.org/schema/beans  
		    http://www.springframework.org/schema/beans/spring-beans.xsd  
		    http://www.springframework.org/schema/tx  
		    http://www.springframework.org/schema/tx/spring-tx.xsd  
		    http://www.springframework.org/schema/jdbc  
		    http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
		    http://www.springframework.org/schema/cache  
		    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
		    http://www.springframework.org/schema/aop  
		    http://www.springframework.org/schema/aop/spring-aop.xsd  
		    http://www.springframework.org/schema/util  
		    http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- 
		SpringAOP
		1、需要额外加入的jar包：
		aopalliance-1.0.jar
		aspectjweaver-1.8.10.jar
		spring-aop-5.0.0.RELEASE.jar
		spring-aspects-5.0.0.RELEASE.jar
		
		2、在配置文件中加入AOP的命名空间
		3、基于注解的方式  
			      配置文件中加入：<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
			      把横切关注点的代码抽象到切面中
			      	切面首先是一个IOC容器中的Bean，即加入@Component 注解
			     	 切面还需加入@Aspect 注解
			      在类中声明各种通知：
					      声明一个方法  
					      在方法前加入@Before
			  可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问链接的细节，如方法名称和参数值
	 -->	    	    
	<context:component-scan base-package="a04aop.b02anno"></context:component-scan>
	
	<!-- 使 AspectJ 注解起作用:自动为匹配的类生成代理对象
		proxy-target-class="true": 表示强制采用 CGLIB 工具生成代理类，
					CGLIB 采用继承的方式生成代理类，而默认的方式是采用 实现接口动态代理的方式 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>