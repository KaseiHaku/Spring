SpringAOP 实现原理：采用动态代理的方式实现代码的切入，由于代理的模式设计模式必须存在接口，
		所以要使用 aop 的类必须要实现某个接口
		
aop 切入点表达式：{
	"execution()||execution()&&execution()!execution()"
	"execution(public int com.kasei.controller.UserController.getUser(String, int)throws IOException, SQLException)"
	"execution(* com.kasei.controller.*.get*(..))"
	"execution(* com.kasei.controller..*.*(..))" // 包含子包的写法
}


面向切面变成织如入代码的方式
    编译期织入： 使用特殊的编译器
    类加载期织入： 使用特殊的类加载器
    运行期织入：使用 JDK 动态代理 或 CGLIB 工具

静态代理：直接编写代理类
JDK 动态代理：在运行时生成代理类，并使用代理类调用原生类
AspectJ:
    第一种：在编译时直接生成代理类，
    第二种：在类加载时使用特殊类加载器生成代理类，spring 中使用 LoadTimeWeaver 加载时织入器来指定特殊的类加载器