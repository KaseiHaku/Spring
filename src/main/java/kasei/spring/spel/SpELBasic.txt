ExpressionParser: 表示是一个 SpEL 表达式的解析器
Expression：表示解析后的 SpEL 表达式实例
EvaluationContext: SpEL 表达式解析时使用的上下文环境
    SimpleEvaluationContext: 仅支持一部分 SpEL 表达式特性
    StandardEvaluationContext: 全支持

SpelParserConfiguration: 表示一个解析配置实例，配置到  ExpressionParser 中
SpelCompilerMode: 表示 SpEL 表达式的执行模式
    OFF: 永远采取 interpreted (解释执行，参考 JS)
    IMMEDIATE: SpEL 使用时，立马采取编译执行模式，先执行编译，在执行
    MIXED: 一开始使用 interpreted 模式，但是当一个 SpEL 经常被调用时，自动切换到 compiled 模式，提高执行效率

    编译模式的限制：
        SpEL 涉及赋值操作的表达式
        SpEL 依赖 spring 的类型转换服务的
        SpEL 使用自定义的 解析器 和 访问器
        SpEL 使用的集合的 过滤 和 投影的



所有类型的 SpEL 表达式：
    Literal expressions
        #{ 'Hello '' World' }
        #{ 123.4 }
        #{ true }
        #{ null }

    Accessing properties, arrays, lists, and maps
        #{ obj.prop }
        #{ ary[0] }
        #{ list[1] }
        #{ map['key'] }

    Inline lists
        #{ {1,2,3,4} }
        #{ {{'a', 'b'}, {'x', 'y'}} }
        #{ {} }         # 空 list

    Inline maps
        #{ {key1:'a', key2:2, key3:{isGood: false}} }
        #{ {:} }        # 空 map

    Array construction
        #{ new int[3]{1,2,3} }
        #{ new int[2][3]{ {1,2,3}, {3,4,5} } }

    Method invocation
        #{ 'abc'.substring(1, 3) }

    Operators
        #{ 'black' < 'block' }
        #{ 2 > -5.0 }
        #{ 3 == 3 }
        #{ 'arbitrary' > null }     # 任何值都 > null
        #{ 'xyz' instanceof T(Integer) }        # 基本类型只能使用包装类型，T(Integer) 而不是 T(int)
        #{ '5.0067' matches '^-?\\d+(\\.\\d{2})?$' }
        #{ list[2] = 3 }

        符号格式的操作 对应的 纯字母格式的操作符
        lt (<)
        gt (>)
        le (<=)
        ge (>=)
        eq (==)
        ne (!=)
        div (/)
        mod (%)
        not (!)

        and (&&)
        or (||)
        not (!)

    Types
        #{ T(java.util.Date) }
        #{ T(String) }          # 相当于 java.lang.String 因为 java.lang 包下的类可以省略前缀，其他包下的不行

    Constructors
        #{ new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 'German') }  # 引用构造函数必须使用全类名

    Variables
        #{ name = #contextName }        # 引用上下文中的变量
        #{ #this }                      # this 永远指向当前被评估的实例
        #{ #root }                      # 永远指向当前上下文

    Functions
        #{ #method() }                  # 引用当前上下文环境中注册的方法

    Bean Reference
        #{ @bean }                      # 引用上下文中配置的 BeanResolver
        #{ &bean }                      # 访问该 bean 的 factory bean

    Ternary Operator
        #{ false ? 'trueExp' : 'falseExp' }

    Elvis Operator
        #{ name != null ?: 'Unknown' }  # 后面表达式的缩写  #{ name != null ? name : 'Unknown' }

    Safe Navigation Operator
        #{ obj?.address?.city }         # 安全导航操作符，参考 Groovy

    Collection Selection
        #{ intList.?[this > 3] }
        #{ map.?[value < 27] }          # map 可以访问的值有 key 和 value, 上下文环境为 Map.Entry 的实例

    Collection Projection
        #{ intList.![this > 3] }        # 容器投影，生成新的容器

    Expression Templating
        #{ random number is #{T(java.lang.Math).random()} }     # 表达式模板，书写没区别，解析的时候需要有个模板实例


